AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Resources:
  ApiGatewayApiAssigment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: ${AWS::StackName}-api
          version: 1.0.0
        paths:
          /fetch-data:
            get:
              responses:
                "200":
                  description: "Successful response"
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          message:
                            type: string
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseTemplates:
                      application/json: "{message: Hello, World!}"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
            options:
              summary: "CORS support"
              responses:
                "200":
                  description: "Default response for CORS method"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
          /store-data:
            post:
              x-amazon-apigateway-integration:
                type: "AWS"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreDataFunction.Arn}/invocations"
                httpMethod: "POST"
                passthroughBehavior: "WHEN_NO_MATCH"
                integrationHttpMethod: "POST"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
              responses:
                "200":
                  description: "Successful operation"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                        type: object
            options:
              summary: "CORS support"
              responses:
                "200":
                  description: "Default response for CORS method"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"


  StoreDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/store-data.storeDataHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30

  MyLambdaPermissionAssigment:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StoreDataFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApiAssigment}/*/*"

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Dev stage"
    Value: !Sub "https://#{ApiGatewayApiAssigment}.execute-api.${AWS::Region}.amazonaws.com/Dev/"
